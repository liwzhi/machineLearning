# -*- coding: utf-8 -*-
"""
Created on Mon Nov 30 09:57:13 2015

@author: Algorithm 001
"""
from __future__ import print_function

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from scipy import ndimage as nd

from skimage import data
from skimage.util import img_as_float
from skimage.filters import gabor_kernel
import cv2
#%% reading data
import matplotlib.cm as cm
import site; site.addsitedir("/usr/local/lib/python2.7/site-packages")
import numpy as np
from numpy import random
import cv2
import pylab as plt
# -*- coding: utf-8 -*-
"""
Created on Sat Sep 19 17:47:27 2015

@author: weizhi
"""

#%% loading each files
import glob, os
import collections
import pandas as pd

# https://docs.python.org/2/library/os.html
def findFilePath(path):
    os.chdir(path)
    filePaths = []
    for file in glob.glob("*.tiff"):
        filePaths.append(file)
    return filePaths

#%% hours and generate the outputs
# deal with each csv file 
row = 1044
col = 1392
surf = cv2.SURF()
orb = cv2.ORB()
def readCSV(path, filePaths):
    number = 400
    data = np.zeros([1044,1392,number])
    kpList = []
    desList = []
    for i in range(7,number+7):
        filePath = path + '/' + filePaths[i]
        
        img1 =cv2.imread(filePath,-1)
        
    #    img1 = img1[:,:1392] - img1[:,:1392].mean()
        img1 = img1[:,:1392]/(2**(4))

      #  print (img1.max())
#aa = img1-img1.mean()
        img1 = img1.astype(np.uint8)
        kp1, des1 = orb.detectAndCompute(img1,None)
        kpList.append(kp1)
        desList.append(des1)
        data[:,:,i-7] = img1
    return data,kpList,desList

def matchesGet(desList):
    matchesList = []
    for i in range(len(desList)-1):
        matches = bf.match(desList[i],desList[i+1])
        matches = sorted(matches, key = lambda x:x.distance)
        len(matches)
        matchesList.append(matches)

    return matchesList



#%% testing
path = 'D:/2nd day/1stCut_3C/Images/2015-06-11_10.51.06/'
filePaths = findFilePath(path)
data,kpList,desList = readCSV(path , filePaths)
mathccesList = matchesGet(desList)

#%%
plt.figure()
plt.imshow(data[:,:,3],cmap = cm.Greys_r)
distanceList = []
#smallList = []
for i in range(399):
    smallList = 0
    img1 = data[:,:,i]
    img2 = data[:,:,i+1]
    kp1 = kpList[i]
    kp2 = kpList[i+1]
    img3 = drawMatches(img1,kp1,img1,kp2,mathccesList[i])
    for j in range(len(mathccesList[i])):
        smallList +=mathccesList[i][j].distance
    distanceList.append(smallList)
    
   # plt.figure(num = i)
   # plt.imshow(img3),plt.show()
x = np.linspace(0,13.3,399)
    
plt.figure()
plt.plot(x,distanceList)

#%% creat a vedio
fourcc = cv2.VideoWriter_fourcc(*'XVID')
fourcc = cv2.cv.CV_FOURCC('M','J','P','G')
out = cv2.VideoWriter('D:/2nd day/1stCut_3C/Images/2015-06-11_10.51.06/output.avi',fourcc, 30.0, (300,300))

#for i in range(400):
#    frame = data[:,:,i]
#    out.write(frame)
    
#%% write it to vedio 


count = 0
while(count<400):
  #  ret, frame = cap.read()
    frame = data[:,:,count]

    count+=1
    plt.figure()
    plt.imshow(frame)
    cv2.imshow('frame',frame)

    out.write(frame)

cv2.destroyAllWindows()



def drawMatches(img1, kp1, img2, kp2, matches):
    """
    My own implementation of cv2.drawMatches as OpenCV 2.4.9
    does not have this function available but it's supported in
    OpenCV 3.0.0

    This function takes in two images with their associated 
    keypoints, as well as a list of DMatch data structure (matches) 
    that contains which keypoints matched in which images.

    An image will be produced where a montage is shown with
    the first image followed by the second image beside it.

    Keypoints are delineated with circles, while lines are connected
    between matching keypoints.

    img1,img2 - Grayscale images
    kp1,kp2 - Detected list of keypoints through any of the OpenCV keypoint 
              detection algorithms
    matches - A list of matches of corresponding keypoints through any
              OpenCV keypoint matching algorithm
    """

    # Create a new output image that concatenates the two images together
    # (a.k.a) a montage
    rows1 = img1.shape[0]
    cols1 = img1.shape[1]
    rows2 = img2.shape[0]
    cols2 = img2.shape[1]

    out = np.zeros((max([rows1,rows2]),cols1+cols2,3), dtype='uint8')

    # Place the first image to the left
    out[:rows1,:cols1] = np.dstack([img1, img1, img1])

    # Place the next image to the right of it
    out[:rows2,cols1:] = np.dstack([img2, img2, img2])

    # For each pair of points we have between both images
    # draw circles, then connect a line between them
    for mat in matches:

        # Get the matching keypoints for each of the images
        img1_idx = mat.queryIdx
        img2_idx = mat.trainIdx

        # x - columns
        # y - rows
        (x1,y1) = kp1[img1_idx].pt
        (x2,y2) = kp2[img2_idx].pt

        # Draw a small circle at both co-ordinates
        # radius 4
        # colour blue
        # thickness = 1
        cv2.circle(out, (int(x1),int(y1)), 4, (255, 0, 0), 1)   
        cv2.circle(out, (int(x2)+cols1,int(y2)), 4, (255, 0, 0), 1)

        # Draw a line in between the two points
        # thickness = 1
        # colour blue
        cv2.line(out, (int(x1),int(y1)), (int(x2)+cols1,int(y2)), (255, 0, 0), 1)


    # Show the image
   # cv2.imshow('Matched Features', out)
  #  cv2.waitKey(0)
#    cv2.destroyWindow('Matched Features')
    return out

    # Also return the image if you'd like a copy
